---
- name: Deploy on OCP
  hosts: all
  become: false
  gather_facts: false

  tasks:

#   - name: "Get list of versions_in_dir from bundle registry"
#      uri:
#        url: "{{ registry_api_http_protocol | default('https') }}://{{ bundle_registry }}/v2/{{ bundle_image_namespace }}/{{ operator_package_name }}/tags/list"
#      register: bob_registry_versions
#      failed_when: false
#      changed_when: false

    - name: "Get list of versions_in_prod from bundle production registry ('{{ production_registry_namespace }}')"
      uri:
#        url: "{{ registry_api_http_protocol | default('https') }}://{{ production_registry_namespace.split('/')[0] }}/v2/{{ production_registry_namespace.split('/')[1] }}/{{ operator_package_name }}/tags/list"
        url: "{{ registry_api_http_protocol | default('https') }}://quay.io/api/v1/repository/{{ test_quay_namespace }}/{{ package_name }}/tags/list"
      register: bob_prod_registry_versions
      failed_when: false
      changed_when: false
      when:
        - production_registry_namespace is defined
        - production_registry_namespace != ""

    - name: "Reseting 'versions_in_registry' variable"
      set_fact:
        versions_in_registry: []
        versions_in_prod_registry: []

#    - name: "Setting all versions to 'versions_in_registry' variable"
#      set_fact:
#        versions_in_registry: "{{ (bob_registry_versions.json.tags | sort_versions | join(',') | regex_replace('^v') | regex_replace(',v',',')).split(',') }}"
#      when:
#      - bob_registry_versions.status is defined
#      - bob_registry_versions.status == 200

    - name: "Setting all versions to 'versions_in_prod_registry' variable"
      set_fact:
        versions_in_prod_registry: "{{ (bob_prod_registry_versions.json.tags | sort_versions | join(',') | regex_replace('^v') | regex_replace(',v',',')).split(',') }}"
      when:
      - bob_prod_registry_versions.status is defined
      - bob_prod_registry_versions.status == 200

    - name: "Convert PR hash to list"
      set_fact:
        hash_for_this_pr: "{{ commit_tag |list }}"

    - name: "Checking if bundle is present"
      set_fact:
        versions_add: "{{ hash_for_this_pr | difference(versions_in_prod_registry) }}"

    - name: "Handling bundle versions when 'operator_version' is defined"
      block:
        - name: "Converting 'operator_version' to list"
          set_fact:
            version_list: "[ '{{ operator_version }}' ]"

        - name: "Checking if bundle '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ operator_version }}' exists"
          block:
            - name: "Setting 'prod_bundle_verion_intersect'"
              set_fact:
                prod_bundle_verion_intersect: "{{ versions_in_prod_registry | intersect(version_list) }}"

            - name: "Fail if '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ operator_version }}' already exists"
              fail:
                msg: "Failing because '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ operator_version }}' already exists"
              when:
                - prod_bundle_verion_intersect.0 is defined
                - ( bundle_force_rebuild is undefined or bundle_force_rebuild|bool == false)
          when:
          - production_registry_namespace is defined
          - production_registry_namespace != ""

        - name: "Filtering versions to add and remove for only 'operator_version' : '{{ operator_version }}' specified by user"
          set_fact:
            versions_add: "{{ versions_in_dir | intersect(version_list) }}"
            versions_remove: "{{ versions_in_registry | intersect(version_list) }}"
            versions_in_dir: "{{ versions_in_dir | intersect(version_list) }}"

        - name: "Force rebuild operator 'operator_version'"
          set_fact:
            versions_add: "[ '{{ operator_version }}' ]"
            versions_in_dir: "{{ versions_in_dir | union(versions_add) }}"
            versions_in_prod_registry: "{{ versions_in_prod_registry | difference(versions_add) }}"
          when:
            - bundle_force_rebuild is defined
            - bundle_force_rebuild|bool

      when: operator_version is defined

    - name: "Delete all tags from operrator {{ operator_package_name }}. Tags: '{{ versions_remove | join(',') }}'"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://quay.io/api/v1/repository/{{ bundle_image_namespace }}/{{ operator_package_name }}/tag/v{{ item }}"
        method: DELETE
        force_basic_auth: yes
        headers:
          Authorization: "Bearer {{ quay_api_token }}"
        status_code: 204
      with_items: "{{ versions_remove }}"
      when:
        - quay_api_token is defined
        - quay_api_token != ""
        - versions_remove.0 is defined
        - versions_remove.0 != ""

    - name: "Reset value for unified package test"
      set_fact:
        previous_package: ''

    - name: "Build bundle image"
      include_role:
        name: build_operator_version_bundle
      vars:
        op_version: "{{ op_ver_item }}"
      loop: "{{ versions_add }}"
      loop_control:
        loop_var: op_ver_item

    - name: "Setting tmp bundle versions without production versions"
      set_fact:
        bob_versions_tmp: "{{ versions_in_dir | difference(versions_in_prod_registry)}}"

    - name: "Setting empty bundles array"
      set_fact:
        bob_bundles_arr: []

    - name: "Filling bundle versions from prod for operator '{{ operator_package_name }}'"
      set_fact:
        bob_bundles_arr: "{{ bob_bundles_arr | default([]) }} + [ '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ item }}' ]"
      with_items: "{{ versions_in_prod_registry }}"
      when:
        - production_registry_namespace is defined
        - production_registry_namespace != ""

    - name: "Filling bundle versions for operator '{{ operator_package_name }}'"
      set_fact:
        bob_bundles_arr: "{{ bob_bundles_arr | default([]) }} + [ '{{ bundle_registry }}/{{ bundle_image_namespace }}/{{ operator_package_name }}:v{{ item }}' ]"
      with_items: "{{ bob_versions_tmp }}"

    - name: "Filling bundle versions for operator '{{ operator_package_name }}' for openshift robot case"
      set_fact:
        bob_bundles_arr: "[ '{{ openshift_robot_hash_array[0] }}/{{ operator_package_name }}:{{ openshift_robot_hash_array[2] }}' ]"
      when:
        - openshift_robot_hash_array.2 is defined
        - openshift_robot_hash_array.2 != ""

    - name: "Adding current operator to the 'operators_for_index'"
      set_fact:
        operators_for_index: "{{ operators_for_index | default([]) | union( [{'name': operator_package_name, 'versions': versions_in_dir, 'versions_prod': versions_in_prod_registry, 'bundles': bob_bundles_arr }]) }}"
      when: versions_add.0 is defined or (index_force_update is defined and index_force_update|bool)

    - name: "Adding current operator to the 'operators_for_index' when only removed version is defined"
      set_fact:
        operators_for_index: "{{ operators_for_index | default([]) | union( [{'name': operator_package_name, 'versions': versions_in_dir, 'versions_prod': versions_in_prod_registry, 'bundles': bob_bundles_arr }]) }}"
      when: versions_add.0 is undefined and versions_remove.0 is defined








    - name: "Deploy on OCP"
      include_role:
        name: deploy_olm_operator_openshift_upstream
