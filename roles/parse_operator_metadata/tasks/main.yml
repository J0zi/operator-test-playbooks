---
- set_fact:
    operator_work_dir: "{{ operator_dir }}"
    when: distro_type == "upstream"

- name: "Determine the package path in the operator metadata directory"
  shell: "egrep -l \"packageName\" {{ operator_work_dir }}/* | head -n 1"
  register: package_path_result

- set_fact:
    package_path: "{{ package_path_result.stdout }}"

- name: "Determine the package name for the operator"
  shell: "{{ yq_bin_path }} r {{ package_path }} 'packageName'"
  register: package_name_result

- set_fact:
    package_name: "{{ package_name_result.stdout }}"

- debug:
    var: current_channel

- name: "Try to get the operator's defaultChannel if exists"
  shell: "{{ yq_bin_path }} r {{ package_path }} 'defaultChannel'"
  register: default_channel_result
  when: current_channel == ''

- set_fact:
    current_channel: "{{ default_channel_result.stdout}}"
  when: current_channel == ''

- name: "Get the first channel if no defaultChannel exists"
  shell: "{{ yq_bin_path }} r {{ package_path }} 'channels[0].name'"
  register: first_channel_result
  when:
    - default_channel_result.stdout is defined
    - default_channel_result.stdout == 'null'

- set_fact:
    current_channel: "{{ first_channel_result.stdout}}"
  when: first_channel_result.stdout is defined

- name: "Determine the current clustersourceversion for the operator channel"
  shell: "{{ yq_bin_path }} r {{ package_path }} --tojson | {{ jq_bin_path }} '.channels[] | select(.name==\"{{ current_channel }}\").currentCSV'"
  register: current_csv_result

- set_fact:
    current_csv: "{{ current_csv_result.stdout }}"

- name: "Determine the clusterserviceversion (CSV) path in the operator metadata directory"
  shell: "egrep -lR \"kind:\\s*?ClusterServiceVersion*?\" {{ operator_work_dir }}/* | xargs -I{} egrep -l \"name:\\s*{{ current_csv }}\" {} | head -n 1"
  register: csv_path_result

- name: "Determine the directory of the current clusterserviceversion"
  shell: "dirname {{ csv_path_result.stdout }}"
  register: current_csv_dir_result

- set_fact:
    csv_path: "{{ csv_path_result.stdout }}"
    current_csv_dir: "{{ current_csv_dir_result.stdout }}"

- name: "Determine the customresurcedefinition (CRD) paths in the operator metadata directory"
  shell: "egrep -l \"kind:\\s*?CustomResourceDefinition*?\" {{ current_csv_dir }}/*"
  register: crd_paths_result
  ignore_errors: true

- set_fact:
    crd_paths: "{{ crd_paths_result.stdout_lines }}"

- name: "Determine operator pod name in the CSV"
  shell: "{{ yq_bin_path }} r {{ csv_path }} 'spec.install.spec.deployments[0].name'"
  register: operator_pod_name_result

- name: "Determine operator container name in the CSV"
  shell: "{{ yq_bin_path }} r {{ csv_path }} 'spec.install.spec.deployments[0].spec.template.spec.containers[0].name'"
  register: operator_container_name_result

- name: "Determine operator capabilities in the CSV"
  shell: "{{ yq_bin_path }} r {{ csv_path }} 'metadata.annotations.capabilities'"
  register: operator_capabilities_result

- set_fact:
    operator_pod_name: "{{ operator_pod_name_result.stdout }}"
    operator_container_name: "{{ operator_container_name_result.stdout }}"
    operator_capabilities: "{{ operator_capabilities_result.stdout }}"

# Check operator's support for InstallModes, see https://github.com/operator-framework/operator-lifecycle-manager/blob/master/Documentation/design/operatorgroups.md#installmodes-and-supported-operatorgroups
- name: "Check if operator install mode supports AllNamespaces"
  shell: "{{ yq_bin_path }} r --tojson {{ csv_path }} 'spec' | {{ jq_bin_path }} '.installModes[] | select(.type==\"AllNamespaces\").supported'"
  register: operator_allnamespaces_support_result

- name: "Check if operator install mode supports OwnNamespace"
  shell: "{{ yq_bin_path }} r --tojson {{ csv_path }} 'spec' | {{ jq_bin_path }} '.installModes[] | select(.type==\"OwnNamespace\").supported'"
  register: operator_ownnamespace_support_result

- name: "Check if operator install mode supports SingleNamespace"
  shell: "{{ yq_bin_path }} r --tojson {{ csv_path }} 'spec' | {{ jq_bin_path }} '.installModes[] | select(.type==\"SingleNamespace\").supported'"
  register: operator_singlenamespace_support_result

- name: "Check if operator install mode supports MultiNamespace"
  shell: "{{ yq_bin_path }} r --tojson {{ csv_path }} 'spec' | {{ jq_bin_path }} '.installModes[] | select(.type==\"MultiNamespace\").supported'"
  register: operator_multinamespace_support_result

- set_fact:
    operator_allnamespaces_support: "{{ operator_allnamespaces_support_result.stdout if operator_allnamespaces_support_result.stdout != '' else false }}"
    operator_ownnamespace_support: "{{ operator_ownnamespace_support_result.stdout if operator_ownnamespace_support_result.stdout != '' else false }}"
    operator_singlenamespace_support: "{{ operator_singlenamespace_support_result.stdout if operator_singlenamespace_support_result.stdout != '' else false }}"
    operator_multinamespace_support: "{{ operator_multinamespace_support_result.stdout if operator_multinamespace_support_result.stdout != '' else false }}"

- name: "Output all collected data to a yaml file in work dir"
  template:
    src: "parsed_operator_data.yml.j2"
    dest: "{{ work_dir }}/parsed_operator_data.yml"
