---
- name: "Setting bundle image name"
  set_fact:
    bundle_index_image: "{{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:{{ bundle_index_image_version }}"

- name: Get list of tags for index image from bundle registry
  uri:
    url: "{{ registry_api_http_protocol | default('https') }}://{{ bundle_registry }}/v2/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}/tags/list"
    return_content: yes
    # validate_certs: false
  register: boi_registry_versions
  failed_when: false


- name: "Create repo for index image with public visibility"
  uri:
    url: "https://quay.io/api/v1/repository"
    method: POST
    body: '{"kind":"image","namespace":"{{ bundle_image_namespace }}","repository":"{{ bundle_index_image_name }}","description":"","visibility":"public"}'
    body_format: json
    force_basic_auth: yes
    headers:
      Authorization: "Bearer {{ quay_api_token }}"
    status_code: 201
    return_content: yes
  when:
    - quay_api_token is defined
    - quay_api_token != ""
    - boi_registry_versions.status != 200


- name: "Reseting 'index_versions_in_registry' variable"
  set_fact:
    index_versions_in_registry: []

- name: "Setting all versions to 'index_versions_in_registry' variable"
  set_fact:
    index_versions_in_registry: "{{ boi_registry_versions.content | from_json | json_query('tags') | list | sort_versions | regex_replace('v') }}"
  when: boi_registry_versions.status == 200


- name: "Settig opm index extra arguments"
  set_fact:
    bundle_index_image_from: "{{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:{{ index_versions_in_registry[0] }}"
    opm_index_add_extra_args: "--from-index {{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:{{ index_versions_in_registry[0] }}"
  when:
    - index_versions_in_registry[0] is defined

- debug:
    var: opm_index_add_extra_args
    verbosity: 2

- name: Handling previous index image
  block:
    - name: "Remove previous versions of operator '{{ ba_name }}' from index image {{ bundle_index_image }}"
      shell: "{{ opm_bin_path }} index rm  -c {{ opm_container_tool }} --operators {{ ba_name }} --tag {{ bundle_index_image }}  {{ opm_index_add_extra_args }}"

    - name: Push bundle image {{ bundle_index_image }}
      shell: "{{ opm_container_tool }} push {{ bundle_index_image }}"
  when:
    - bundle_index_image_from is defined
    - bundle_index_image_from != ""

- debug:
    var: ba_name
    verbosity: 2

- debug:
    var: ba_versions
    verbosity: 2

- name: "Setting empty bundles array"
  set_fact:
    bundles_arr: []

- name: "Filling bundle versions array"
  set_fact:
    bundles_arr: "{{ bundles_arr | default([]) }} + [ '{{ bundle_registry }}/{{ bundle_image_namespace }}/{{ ba_name }}:v{{ item }}' ]"
  with_items: "{{ ba_versions }}"


- name: "Setting bundle image names"
  set_fact:
    bundle_images: "{{ bundles_arr | join(',') }}"

- debug:
    var: bundle_images
    verbosity: 2

- name: "Retag bundle input image"
  block:
    - name: Retag image {{ operator_input_image }}
      shell: "{{ opm_container_tool }} tag {{ operator_input_image  }} {{ bundle_images }}"
    - name: Push image {{ operator_input_image }}
      shell: "{{ opm_container_tool }} push {{ bundle_images }}"
  when:
  - operator_input_image is defined
  - operator_input_image != ""
- fail:
    msg: "opm index add mode has to be set to following values: [replaces, semver, semver-skippatch] (default "replaces")"
  when:
    - opm_index_add_mode is undefined
    - opm_index_add_mode == ""

- name: "Add operator '{{ ba_name }}' to index image {{ bundle_index_image }}"
  shell: "{{ opm_bin_path }} index add -u {{ opm_container_tool }} --bundles {{ bundle_images }} --tag {{ bundle_index_image }} --mode {{ opm_index_add_mode }} {{ opm_index_add_extra_args }}"
  # environment:
  #   SSL_CERT_FILE: /tmp/certs/domain.crt

- name: Push bundle image {{ bundle_index_image }}
  shell: "{{ opm_container_tool }} push {{ bundle_index_image }}"