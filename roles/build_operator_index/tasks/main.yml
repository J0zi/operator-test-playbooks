---
- name: "Quay login"
  shell: "{{ opm_container_tool }} login -u=\"{{ quay_user }}\" -p={{ quay_password }} quay.io"
  no_log: True
  when:
    - quay_user is defined
    - quay_password is defined
    - quay_user != ""
    - quay_password != ""

- name: "Setting bundle image name"
  set_fact:
    bundle_index_image: "{{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:{{ bundle_index_image_version }}"

- name: "Get list of tags for index image from bundle registry"
  uri:
    url: "{{ registry_api_http_protocol | default('https') }}://{{ bundle_registry }}/v2/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}/tags/list"
  register: boi_registry_versions
  failed_when: false
  when: quay_user is not defined

- name: "Create primary index repo"
  include_tasks: create_index_repo.yml
  vars:
    bundle_index_image_specific_namespace: "{{ bundle_index_image_namespace }}"
    bundle_index_image_specific_name: "{{ bundle_index_image_name }}"
  when:
    - quay_user is not defined
    - quay_api_token is defined
    - quay_api_token != ""

- name: "Resetting 'index_versions_in_registry' variable"
  set_fact:
    index_versions_in_registry: []
    opm_index_add_extra_args: ""

- name: "Setting all versions to 'index_versions_in_registry' variable"
  set_fact:
    index_versions_in_registry: "{{ boi_registry_versions.json.tags | sort_versions | regex_replace('^v') }}"
  when:
   - quay_user is not defined
   - boi_registry_versions.status == 200

- name: "Setting opm index extra arguments"
  set_fact:
    bundle_index_image_from: "{{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:{{ index_versions_in_registry[0] }}"
    opm_index_add_extra_args: "--from-index {{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:{{ index_versions_in_registry[0] }}"
  when:
    - quay_user is not defined
    - index_versions_in_registry.0 is defined


- name: "Setting opm index extra arguments"
  set_fact:
    bundle_index_image_from: "{{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:latest"
    opm_index_add_extra_args: "--from-index {{ bundle_registry }}/{{ bundle_index_image_namespace }}/{{ bundle_index_image_name }}:latest"
  when:
    - index_versions_in_registry.0 is defined
    - quay_user is defined

- name: "Handling previous index image"
  block:
    - name: "Remove previous versions of operator '{{ ba_name }}' from index image {{ bundle_index_image }}"
      shell: "{{ opm_bin_path }} index rm  -c {{ opm_container_tool }} --operators {{ ba_name }} --tag {{ bundle_index_image }}  {{ opm_index_add_extra_args }}"

    - name: Push bundle image {{ bundle_index_image }}
      shell: "{{ opm_container_tool }} push {{ bundle_index_image }}"
  when:
    - index_versions_in_registry.0 is defined
    - bundle_index_image_from is defined
    - bundle_index_image_from != ""

- set_fact:
    ba_versions_tmp: "{{ ba_versions | difference(ba_versions_prod)}}"

- name: "Setting empty bundles array"
  set_fact:
    bundles_arr: []

- name: "Filling bundle versions array from prod"
  set_fact:
    bundles_arr: "{{ bundles_arr | default([]) }} + [ '{{ production_registry_namespace }}/{{ ba_name }}:v{{ item }}' ]"
  with_items: "{{ ba_versions_prod }}"
  when:
    - production_registry_namespace is defined
    - production_registry_namespace != ""

- name: "Filling bundle versions array"
  set_fact:
    bundles_arr: "{{ bundles_arr | default([]) }} + [ '{{ bundle_registry }}/{{ bundle_image_namespace }}/{{ ba_name }}:v{{ item }}' ]"
  with_items: "{{ ba_versions_tmp }}"

- name: "Setting bundle image names"
  set_fact:
    bundle_images: "{{ bundles_arr | join(',') }}"

- name: "Retag bundle input image"
  block:
    - name: Retag image {{ operator_input_image }}
      shell: "{{ opm_container_tool }} tag {{ operator_input_image  }} {{ bundle_images }}"
    - name: Push image {{ operator_input_image }}
      shell: "{{ opm_container_tool }} push {{ bundle_images }}"
  when:
  - operator_input_image is defined
  - operator_input_image != ""

- name: "Failing when mode is empty"
  fail:
    msg: "opm index add mode has to be set to following values: [replaces, semver, semver-skippatch] (default  replaces)"
  when: opm_index_add_mode is undefined or opm_index_add_mode == ""

- name: "Add operator '{{ ba_name }}' to index image {{ bundle_index_image }}"
  shell: "{{ opm_bin_path }} index add -u {{ opm_container_tool }} --bundles {{ bundle_images }} --tag {{ bundle_index_image }} --mode {{ opm_index_add_mode }} {{ opm_index_add_extra_args }}"
  failed_when: false
  register: ia_rc

- name: "Push bundle index image {{ bundle_index_image }}"
  shell: "{{ opm_container_tool }} push {{ bundle_index_image }}"
  when: ia_rc.rc == 0

- name: "Add failed operators when creating index from bundle"
  set_fact:
    bundle_index_add_failed: "{{ bundle_index_add_failed | default([]) }} + [ '{{ ba_name }}' ]"
  when: ia_rc.rc is defined and ia_rc.rc != 0

- name: "Ensure that the operator bundle for courier directory exists and is empty"
  file:
    state: "{{ item }}"
    path: "{{ operator_bundle_dir_for_courier }}"
  with_items:
    - absent
    - directory

- name: "Trying to export operator '{{ ba_name }}' from index image {{ bundle_index_image }}"
  shell: "{{ opm_bin_path }} index export -c {{ opm_container_tool }} --package {{ ba_name }} --index {{ bundle_index_image }} --download-folder {{ operator_bundle_dir_for_courier }}"
  register: rob_export_rc

- name: "Run linting tests with operator-courier verify on the deployed operator"
  include_role:
    name: operator_courier_verify
  vars:
    operator_work_dir: "{{ operator_bundle_dir_for_courier }}"
  when: run_lint|bool

- name: "Quay login via auth token"
  shell: "{{ opm_container_tool }} login -u=\\$oauthtoken -p={{ quay_api_token }} quay.io"
  no_log: True
  when: quay_api_token is defined and quay_api_token != ""

# Openshift primary index should be on RH side with username and duplicate on openshift-community-operators public side with token
- block:
  - set_fact:
      bundle_index_image_duplicate: "{{ bundle_registry }}/{{ bundle_index_image_duplicate_namespace }}/{{ bundle_index_image_duplicate_name }}:{{ bundle_index_image_version }}"

  - name: "Retag/copy index image {{ bundle_index_image }} to {{ bundle_index_image_duplicate }}"
    shell: "{{ opm_container_tool }} tag {{ bundle_index_image  }} {{ bundle_index_image_duplicate }}"

  - name: "Create duplicated index repo"
    include_tasks: create_index_repo.yml
    vars:
      bundle_index_image_specific_namespace: "{{ bundle_index_image_duplicate_namespace }}"
      bundle_index_image_specific_name: "{{ bundle_index_image_duplicate_name }}"

  - name: "Push bundle index image {{ bundle_index_image_duplicate }}"
    shell: "{{ opm_container_tool }} push {{ bundle_index_image_duplicate }}"
  when:
    - bundle_index_image_duplicate_namespace is defined
    - bundle_index_image_duplicate_name is defined
    - bundle_index_image_duplicate_namespace != ""
    - bundle_index_image_duplicate_name != ""
    - quay_user is defined
