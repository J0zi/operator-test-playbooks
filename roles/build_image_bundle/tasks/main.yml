# - name: Build bundle image from bundle format
#   block:
#     - fail:
#         msg: "{{ operator_format }}"
#     - name: Building image
#     shell: "/tmp/operator-test/bin/opm alpha bundle build -b docker -d /tmp/community-operators-for-catalog/scripts/bundle-examples/prometheusoperator/0.32.0 --tag localhost:5000/example/operator:v0.1.0 -o -p prometheusoperator -c stable -e stable"
#   when: operator_format == "bundle"

#  name: Build bundle image from manifest format
- name: "Ensure that the operator manifest to bundle directory is empty"
  file:
    state: "absent"
    path: "{{ operator_manifest_to_bundle_dir }}"
- name: "Ensure that the operator manifest to bundle directory is created"
  file:
    state: "directory"
    path: "{{ operator_manifest_to_bundle_dir }}"
- name: "Copy manifest format files to {{ operator_manifest_to_bundle_dir }}"
  copy:
    src: "{{ operator_dir }}"
    dest: "{{ operator_manifest_to_bundle_dir }}"
    remote_src: yes
# - name: "Checking for operator latest version"
#   block:
#     - name: "Find all versions"
#       find:
#         paths: "{{ operator_manifest_to_bundle_dir }}/{{ operator_dir | basename }}"
#         recurse: no
#         file_type: directory
#       register: vd

#     - set_fact:
#       operator_versions: "{{ vd.files | sort(attribute='path', reverse=True) | map(attribute='path') | list }}"

#     - set_fact:
#       operator_version: "{{ operator_versions[0] | basename }}"

#   when:
#     - operator_version == "latest"
#     - operator_format == "manifest"

- set_fact:
    operator_name: "{{ operator_dir | basename }}"

- set_fact:
    bundle_image: "{{ bundle_registry }}/{{ bundle_image_namespace }}/{{ operator_name }}:v{{ operator_version }}"
    annotation_file_path: "{{ operator_manifest_to_bundle_dir }}/{{ operator_name }}/{{ operator_version }}/metadata/annotations.yaml"
    clusterserviceversion_file_path: "{{ operator_manifest_to_bundle_dir }}/{{ operator_name }}/{{ operator_version }}/manifests/{{ operator_name }}.{{ operator_version }}.clusterserviceversion.yaml"

- name: Ensure replaces is removed (bundle format only)
  lineinfile:
    path: '{{ clusterserviceversion_file_path }}'
    regexp: '^\s*replaces:'
    state: absent
  when: operator_format == "bundle"

- name: Remove bundle image {{ bundle_image }}
  shell: "{{ opm_container_tool }} rmi -f {{ bundle_image }}"

- name: "Read the variables from annotations.yaml"
  block:
    - name: Check if annotation file exists
      stat:
        path: "{{ annotation_file_path }}"
      register: annotation_file_st

    - name: Fail if anotation file doesn't exists
      fail:
      when: not annotation_file_st.stat.exists

    - name: "Getting content of annotation.yaml file"
      shell: "cat {{ annotation_file_path }}"
      register: annotation_data

    - name: Set facts
      set_fact:
        annotations_vars: "{{ annotation_data.stdout | from_yaml }}"

    - debug:
        var: annotations_vars.annotations

    - name: Set annotation variables
      set_fact:
        operator_channel_default: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.channel.default.v1'] }}"
        operator_channels: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.channels.v1'] }}"
        operator_manifest_dir: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.manifests.v1'] }}"
        operator_metadata_dir: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.metadata.v1'] }}"
        operator_package_name: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.package.v1'] }}"
    - name: "Generate bundle image {{ bundle_image }} from bundle format"
      shell:
        cmd: "{{ opm_bin_path }} alpha bundle build --directory {{ operator_version }}/{{ operator_manifest_dir }} --package {{ operator_package_name }} -t {{ bundle_image }} -c {{ operator_channels }} -e {{ operator_channel_default }} -b {{ opm_container_tool }}"
        chdir: "{{ operator_manifest_to_bundle_dir }}/{{ operator_name }}"
  when: operator_format == "bundle"

- name: "Generate bundle image {{ bundle_image }} from manifest format"
  shell:
    cmd: "{{ opm_bin_path }} alpha bundle build --directory {{ operator_version }} --package {{ operator_name }} -t {{ bundle_image }} -b {{ opm_container_tool }}"
    chdir: "{{ operator_manifest_to_bundle_dir }}/{{ operator_name }}"
  when: operator_format == "manifest"

- name: Push bundle image {{ bundle_image }}
  shell: "{{ opm_container_tool }} push {{ bundle_image }}"
