- name: "Search for all versions for operator '{{ operator_dir | basename }}'"
  find:
    paths: "{{ operator_dir }}"
    recurse: no
    file_type: directory
  register: versions_find

- set_fact:
    versions_in_dir: "{{ versions_find.files | map(attribute='path' ) | map('basename') | list | sort_versions }}"
    operator_dir_name: "{{ operator_dir | basename }}"

- name: "Detect format"
  include_role:
    name: detect_format
  vars:
    operator_input_image: ""
    operator_version: "{{ versions_in_dir[0] }}"

- name: "Get list of versions_in_dir from bundle registry"
  uri:
    url: "{{ registry_api_http_protocol | default('https') }}://{{ bundle_registry }}/v2/{{ bundle_image_namespace }}/{{ operator_package_name }}/tags/list"
    return_content: yes
    # validate_certs: false
  register: bib_registry_versions
  failed_when: false
  changed_when: false

- name: "Create repo with public visibility"
  uri:
    url: "https://quay.io/api/v1/repository"
    method: POST
    body: '{"kind":"image","namespace":"{{ bundle_image_namespace }}","repository":"{{ operator_package_name }}","description":"Bundle image for {{ operator_package_name }} operator","visibility":"public"}'
    body_format: json
    force_basic_auth: yes
    headers:
      Authorization: "Bearer {{ quay_api_token }}"
    status_code: 201
    return_content: yes
  when:
    - quay_api_token is defined
    - quay_api_token != ""
    - bib_registry_versions.status != 200

- name: "Reseting 'versions_in_registry' variable"
  set_fact:
    versions_in_registry: []

- name: "Setting all versions to 'versions_in_registry' variable"
  set_fact:
    versions_in_registry: "{{ bib_registry_versions.content | from_json | json_query('tags') | list | sort_versions | regex_replace('v') }}"
  when: bib_registry_versions.status == 200

- debug:
    var: versions_in_registry
    verbosity: 2
- debug:
    var: versions_in_dir
    verbosity: 2

- name: "Filtring versions to add and remove"
  set_fact:
    verions_add: "{{ versions_in_dir | difference(versions_in_registry) }}"
    verions_remove: "{{ versions_in_registry | difference(versions_in_dir) }}"

- debug:
    var: verions_add
    verbosity: 2

- debug:
    var: verions_remove
    verbosity: 2

- name: "Reset value for unified package test"
  set_fact:
    previous_package: ''

- name: "Build bundle image"
  include_role:
    name: build_operator_version_bundle
  vars:
    operator_version: "{{ op_ver_item }}"
  loop: "{{ verions_add }}"
  loop_control:
    loop_var: op_ver_item

- name: "Adding current operator to the 'operators_for_index'"
  set_fact:
    operators_for_index: "{{ operators_for_index | default([]) | union( [{'name': operator_package_name, 'versions': versions_in_dir }]) }}"
  when: verions_add.0 is defined or (index_force_rebuild is defined and index_force_rebuild|bool)
